// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayRight.Extrato.Infra.Contexts;

#nullable disable

namespace PayRight.Extrato.Infra.Migrations
{
    [DbContext(typeof(ContextoDbEscrita))]
    [Migration("20220128200106_AddDataPagtoEDeEstimativa")]
    partial class AddDataPagtoEDeEstimativa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PayRight.Extrato.Domain.Entities.Atividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly?>("DataPagamento")
                        .HasColumnType("date");

                    b.Property<DateOnly>("EstimativaPagamento")
                        .HasColumnType("date");

                    b.Property<Guid?>("ExtratoId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Pago")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TipoAtividade")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ExtratoId");

                    b.HasIndex("Id");

                    b.ToTable("atividades", (string)null);
                });

            modelBuilder.Entity("PayRight.Extrato.Domain.Entities.ContaCorrenteExtrato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContaCorrenteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalEstimado")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ContaCorrenteId")
                        .HasDatabaseName("idx_conta_corrente_id");

                    b.HasIndex("Id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("idx_usuario_id");

                    b.ToTable("extratos_contas_corrente", (string)null);
                });

            modelBuilder.Entity("PayRight.Extrato.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("PayRight.Extrato.Domain.Entities.ContaCorrenteExtrato", "Extrato")
                        .WithMany("Atividades")
                        .HasForeignKey("ExtratoId");

                    b.OwnsOne("PayRight.Extrato.Domain.ValueObjects.NomeAtividade", "NomeAtividade", b1 =>
                        {
                            b1.Property<Guid>("AtividadeId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("varchar(128)");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("varchar(32)");

                            b1.HasKey("AtividadeId");

                            b1.ToTable("atividades");

                            b1.WithOwner()
                                .HasForeignKey("AtividadeId");
                        });

                    b.Navigation("Extrato");

                    b.Navigation("NomeAtividade")
                        .IsRequired();
                });

            modelBuilder.Entity("PayRight.Extrato.Domain.Entities.ContaCorrenteExtrato", b =>
                {
                    b.OwnsOne("PayRight.Extrato.Domain.ValueObjects.PeriodoExtrato", "PeriodoExtrato", b1 =>
                        {
                            b1.Property<Guid>("ContaCorrenteExtratoId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Ano")
                                .HasMaxLength(4)
                                .HasColumnType("int")
                                .HasColumnName("ano");

                            b1.Property<int>("Mes")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("mes");

                            b1.HasKey("ContaCorrenteExtratoId");

                            b1.ToTable("extratos_contas_corrente");

                            b1.WithOwner()
                                .HasForeignKey("ContaCorrenteExtratoId");
                        });

                    b.Navigation("PeriodoExtrato")
                        .IsRequired();
                });

            modelBuilder.Entity("PayRight.Extrato.Domain.Entities.ContaCorrenteExtrato", b =>
                {
                    b.Navigation("Atividades");
                });
#pragma warning restore 612, 618
        }
    }
}
